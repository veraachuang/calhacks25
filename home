import React, { useState, useEffect } from 'react';
import { Volume2, Zap, Palette } from 'lucide-react';

export default function ProfilePage() {
  const [avatarName, setAvatarName] = useState('');
  const [spiceLevel, setSpiceLevel] = useState(2);
  const [flameColor, setFlameColor] = useState('orange');
  const [animationOffset, setAnimationOffset] = useState(0);

  // Animate flame flicker - smooth and fluid
  useEffect(() => {
    let offset = 0;
    const interval = setInterval(() => {
      offset += 0.1;
      setAnimationOffset(offset);
    }, 50);
    return () => clearInterval(interval);
  }, []);

  const flameColors = [
    { id: 'orange', name: 'Classic', colors: ['#ff4500', '#ff6b35', '#ffa500', '#ffcc00'] },
    { id: 'blue', name: 'Cool Blue', colors: ['#1e90ff', '#4169e1', '#00bfff', '#87ceeb'] },
    { id: 'purple', name: 'Mystic', colors: ['#8b00ff', '#9d4edd', '#c77dff', '#e0aaff'] },
    { id: 'green', name: 'Emerald', colors: ['#00ff41', '#39ff14', '#7fff00', '#adff2f'] },
    { id: 'pink', name: 'Hot Pink', colors: ['#ff1493', '#ff69b4', '#ff91af', '#ffb3d9'] },
    { id: 'white', name: 'Pure', colors: ['#ffffff', '#f0f0f0', '#e0e0e0', '#d0d0d0'] }
  ];

  const spiceLevels = [
    { level: 1, label: 'Spark', desc: 'Light & casual vibes', color: 'from-blue-400 to-cyan-400' },
    { level: 2, label: 'Warm', desc: 'Friendly & engaging', color: 'from-green-400 to-emerald-400' },
    { level: 3, label: 'Hot', desc: 'Deep & meaningful', color: 'from-orange-400 to-amber-400' },
    { level: 4, label: 'Inferno', desc: 'Bold & unfiltered', color: 'from-red-400 to-rose-400' }
  ];

  const getCurrentColors = () => {
    return flameColors.find(f => f.id === flameColor)?.colors || flameColors[0].colors;
  };

  const getFlameIntensity = () => {
    // Preview shows level 1 flame (small)
    return 1;
  };

  const generateFlamePath = (layer, intensity) => {
    const time = animationOffset;
    const baseSize = 1 - (layer * 0.12);
    
    // Multiple sine waves for fluid, organic movement
    const leftWobble = Math.sin(time + layer) * 3;
    const rightWobble = Math.sin(time + layer + 1) * 3;
    const tipWobble = Math.sin(time * 1.5 + layer) * 2;
    const sideWave = Math.sin(time * 0.8) * 2;
    
    // Classic flame emoji shape with fluid curves
    const leftCurve = 30 + leftWobble;
    const rightCurve = 70 + rightWobble;
    const tipHeight = 20 - (layer * 3) + tipWobble;
    const baseWidth = (25 + (layer * 3)) * baseSize;
    
    const midLeftX = 35 + sideWave;
    const midRightX = 65 - sideWave;
    
    return `
      M 50,${tipHeight}
      Q ${leftCurve},${35 + leftWobble} ${midLeftX},${55}
      Q ${30},${70} ${50 - baseWidth},${85}
      L ${50 + baseWidth},${85}
      Q ${70},${70} ${midRightX},${55}
      Q ${rightCurve},${35 + rightWobble} 50,${tipHeight}
      Z
    `;
  };

  const FlameAvatar = () => {
    const colors = getCurrentColors();
    const intensity = getFlameIntensity();
    
    return (
      <svg width="200" height="200" viewBox="0 0 100 100" className="drop-shadow-2xl">
        <defs>
          <filter id="glow">
            <feGaussianBlur stdDeviation="4" result="coloredBlur"/>
            <feMerge>
              <feMergeNode in="coloredBlur"/>
              <feMergeNode in="coloredBlur"/>
              <feMergeNode in="SourceGraphic"/>
            </feMerge>
          </filter>
          
          {colors.map((color, i) => (
            <linearGradient key={i} id={`flameGradient${i}`} x1="0%" y1="0%" x2="0%" y2="100%">
              <stop offset="0%" stopColor="#ffffff" stopOpacity={i === 0 ? "0.9" : "0.3"}/>
              <stop offset="30%" stopColor={color} stopOpacity="1"/>
              <stop offset="100%" stopColor={color} stopOpacity="0.6"/>
            </linearGradient>
          ))}
        </defs>

        <ellipse
          cx="50"
          cy="88"
          rx="30"
          ry="10"
          fill={colors[0]}
          opacity="0.4"
          filter="url(#glow)"
        />

        <g filter="url(#glow)">
          <path
            d={generateFlamePath(3, intensity)}
            fill={`url(#flameGradient3)`}
            opacity="0.5"
          />
          
          <path
            d={generateFlamePath(2, intensity)}
            fill={`url(#flameGradient2)`}
            opacity="0.7"
          />
          
          <path
            d={generateFlamePath(1, intensity)}
            fill={`url(#flameGradient1)`}
            opacity="0.85"
          />
          
          <path
            d={generateFlamePath(0, intensity)}
            fill={`url(#flameGradient0)`}
            opacity="1"
          />
        </g>
      </svg>
    );
  };

  const handleStartMatching = () => {
    if (avatarName) {
      alert('Ready to find your match! (Next: Loading/Matching screen)');
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 flex items-center justify-center p-4">
      <div className="w-full max-w-4xl">
        <div className="text-center mb-8">
          <div className="flex items-center justify-center gap-3 mb-4">
            <Volume2 className="w-8 h-8 text-purple-400" />
            <h1 className="text-4xl font-bold text-white">Voice Match</h1>
          </div>
          <p className="text-gray-300">Connect through conversation, reveal when ready</p>
        </div>

        <div className="bg-gray-800/50 backdrop-blur-lg rounded-2xl p-8 shadow-2xl border border-gray-700">
          
          <div className="grid md:grid-cols-2 gap-8">
            <div>
              <label className="flex items-center gap-2 text-white text-lg font-semibold mb-4">
                <Palette className="w-5 h-5" />
                Customize Your Flame
              </label>

              <div className="bg-gradient-to-br from-gray-900 to-gray-800 rounded-2xl p-8 mb-6 flex items-center justify-center border border-gray-700 relative overflow-hidden">
                <div 
                  className="absolute inset-0 opacity-20 blur-3xl"
                  style={{ 
                    background: `radial-gradient(circle, ${getCurrentColors()[0]} 0%, transparent 70%)`
                  }}
                />
                
                <div className="relative">
                  <FlameAvatar />
                  
                  <div className="text-center mt-4">
                    <p className="text-gray-400 text-xs">Preview - Level 1</p>
                    <p className="text-gray-500 text-xs mt-1">Flame grows as connection deepens</p>
                  </div>
                </div>
              </div>

              <div className="space-y-5">
                <div>
                  <label className="text-white text-sm font-medium mb-3 block">Flame Color</label>
                  <div className="grid grid-cols-3 gap-2">
                    {flameColors.map((flame) => (
                      <button
                        key={flame.id}
                        onClick={() => setFlameColor(flame.id)}
                        className={`relative p-3 rounded-lg transition-all ${
                          flameColor === flame.id
                            ? 'ring-2 ring-white scale-105'
                            : 'hover:scale-105'
                        }`}
                        style={{
                          background: `linear-gradient(135deg, ${flame.colors[0]}, ${flame.colors[2]})`
                        }}
                      >
                        <span className="text-white text-xs font-medium drop-shadow-lg">
                          {flame.name}
                        </span>
                      </button>
                    ))}
                  </div>
                </div>

                <div className="bg-purple-900/30 border border-purple-500/30 rounded-lg p-3">
                  <p className="text-purple-200 text-xs leading-relaxed">
                    ðŸ’¡ <strong>How it works:</strong> Your flame starts small and grows as you and your match connect. Reach Level 4 to unlock face reveal!
                  </p>
                </div>
              </div>
            </div>

            <div className="flex flex-col">
              <div className="mb-6">
                <label className="text-white text-lg font-semibold mb-3 block">
                  Avatar Name
                </label>
                <input
                  type="text"
                  value={avatarName}
                  onChange={(e) => setAvatarName(e.target.value)}
                  placeholder="Enter your alias..."
                  className="w-full bg-gray-700/50 border border-gray-600 rounded-xl px-4 py-3 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 transition-all"
                  maxLength={20}
                />
              </div>

              <div className="flex-1">
                <label className="flex items-center gap-2 text-white text-lg font-semibold mb-4">
                  <Zap className="w-5 h-5" />
                  Conversation Intensity
                </label>
                
                <div className="space-y-3">
                  {spiceLevels.map((level) => (
                    <button
                      key={level.level}
                      onClick={() => setSpiceLevel(level.level)}
                      className={`w-full p-4 rounded-xl transition-all transform hover:scale-102 ${
                        spiceLevel === level.level
                          ? `bg-gradient-to-r ${level.color} text-white shadow-lg`
                          : 'bg-gray-700/30 text-gray-300 hover:bg-gray-700/50'
                      }`}
                    >
                      <div className="flex items-center justify-between">
                        <div className="text-left">
                          <div className="font-bold text-lg">{level.label}</div>
                          <div className={`text-sm ${spiceLevel === level.level ? 'text-white/90' : 'text-gray-400'}`}>
                            {level.desc}
                          </div>
                        </div>
                        <div className="flex gap-1">
                          {[...Array(level.level)].map((_, i) => (
                            <div
                              key={i}
                              className={`w-2 h-8 rounded-full ${
                                spiceLevel === level.level ? 'bg-white/80' : 'bg-gray-500'
                              }`}
                            />
                          ))}
                        </div>
                      </div>
                    </button>
                  ))}
                </div>
              </div>
            </div>
          </div>

          <button
            onClick={handleStartMatching}
            disabled={!avatarName}
            className={`w-full py-4 rounded-xl font-bold text-lg transition-all transform mt-8 ${
              avatarName
                ? 'bg-gradient-to-r from-purple-500 to-pink-500 text-white hover:scale-105 hover:shadow-2xl'
                : 'bg-gray-700 text-gray-500 cursor-not-allowed'
            }`}
          >
            {avatarName ? 'Find Your Match' : 'Enter Avatar Name to Continue'}
          </button>
        </div>

        <div className="text-center mt-6 text-gray-400 text-sm">
          <p>ðŸŽ¤ Voice-only chat â€¢ ðŸ¤– AI-mediated â€¢ ðŸ”¥ Flame grows as connection deepens</p>
        </div>
      </div>
    </div>
  );
}
