#!/usr/bin/env python3
"""
Network Setup Script for HeartLink
Helps configure the app for cross-device connectivity on the same network.
"""
import socket
import os
import sys

def get_local_ip():
    """Get the local IP address"""
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        local_ip = s.getsockname()[0]
        s.close()
        return local_ip
    except Exception as e:
        return None

def check_certificates():
    """Check if SSL certificates exist"""
    cert_exists = os.path.exists('cert.pem')
    key_exists = os.path.exists('key.pem')
    return cert_exists and key_exists

def generate_certificates(local_ip):
    """Generate SSL certificates with local IP"""
    print("üîê Generating SSL certificates...")
    cmd = f'openssl req -x509 -newkey rsa:4096 -nodes -out cert.pem -keyout key.pem -days 365 -subj "/CN=localhost" -addext "subjectAltName=DNS:localhost,IP:127.0.0.1,IP:{local_ip}"'
    result = os.system(cmd)
    if result == 0:
        print("‚úÖ SSL certificates generated successfully!")
        return True
    else:
        print("‚ùå Failed to generate SSL certificates")
        return False

def create_env_file(local_ip, port=8765):
    """Create .env.local file for React app"""
    env_path = 'heartlink-app/.env.local'
    
    print(f"\nüìù Choose your setup:")
    print(f"  1. Same device (localhost)")
    print(f"  2. Different device on same network (use server IP: {local_ip})")
    
    choice = input("\nEnter choice (1 or 2): ").strip()
    
    if choice == '1':
        backend_url = f'https://localhost:{port}'
    else:
        backend_url = f'https://{local_ip}:{port}'
    
    with open(env_path, 'w') as f:
        f.write(f"# HeartLink Backend Configuration\n")
        f.write(f"# Generated by setup_network.py\n\n")
        f.write(f"VITE_BACKEND_URL={backend_url}\n")
    
    print(f"‚úÖ Created {env_path}")
    print(f"   Backend URL: {backend_url}")
    return backend_url

def print_instructions(local_ip, backend_url, port=8765):
    """Print setup instructions"""
    print("\n" + "="*70)
    print("üéâ HEARTLINK NETWORK SETUP COMPLETE!")
    print("="*70)
    print(f"\nüìç Your Server IP: {local_ip}")
    print(f"üìç Backend URL: {backend_url}")
    
    print("\n" + "="*70)
    print("üìã INSTRUCTIONS:")
    print("="*70)
    
    print("\nüñ•Ô∏è  ON THIS MACHINE (Server):")
    print("   1. Start the Flask backend:")
    print("      python app.py")
    print()
    print("   2. In a new terminal, start the React frontend:")
    print("      cd heartlink-app")
    print("      npm run dev")
    print()
    print(f"   3. Open your browser to: http://localhost:5173")
    
    if 'localhost' not in backend_url:
        print("\nüì± ON THE OTHER DEVICE (Client):")
        print(f"   1. Make sure you're connected to the same WiFi network")
        print(f"   2. Open your browser to: http://{local_ip}:5173")
        print(f"   3. ‚ö†Ô∏è  IMPORTANT: Accept the security warning when prompted")
        print(f"      (The app uses a self-signed SSL certificate)")
        print()
        print(f"   Alternative: If the above doesn't work, set up client device:")
        print(f"   - Create heartlink-app/.env.local on client device:")
        print(f"     VITE_BACKEND_URL=https://{local_ip}:{port}")
    
    print("\n" + "="*70)
    print("üî• FIREWALL NOTE:")
    print("="*70)
    print(f"If connection fails, you may need to allow ports {port} and 5173")
    print("through your firewall:")
    print()
    print("On macOS:")
    print(f"  System Preferences ‚Üí Security & Privacy ‚Üí Firewall ‚Üí Firewall Options")
    print()
    print("On Windows:")
    print(f"  Windows Defender Firewall ‚Üí Allow an app through firewall")
    
    print("\n" + "="*70)
    print("üß™ TESTING:")
    print("="*70)
    print(f"Test backend connectivity:")
    print(f"  curl -k {backend_url}/health")
    
    print("\n" + "="*70 + "\n")

def main():
    os.chdir(os.path.dirname(os.path.abspath(__file__)))
    
    print("üåê HeartLink Network Setup")
    print("="*70)
    
    # Get local IP
    local_ip = get_local_ip()
    if not local_ip:
        print("‚ùå Could not determine local IP address")
        sys.exit(1)
    
    print(f"‚úÖ Local IP detected: {local_ip}")
    
    # Check/generate certificates
    if not check_certificates():
        print("‚ö†Ô∏è  SSL certificates not found")
        if input("Generate certificates? (y/n): ").lower() == 'y':
            if not generate_certificates(local_ip):
                sys.exit(1)
        else:
            print("‚ùå SSL certificates are required")
            sys.exit(1)
    else:
        print("‚úÖ SSL certificates found")
    
    # Create .env.local
    print()
    backend_url = create_env_file(local_ip)
    
    # Print instructions
    print_instructions(local_ip, backend_url)

if __name__ == "__main__":
    main()

